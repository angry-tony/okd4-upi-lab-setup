apiVersion: v1
kind: Template
metadata:
  annotations:
    description: "Build and Deploy template for Quarkus applications built using a Tekton Pipeline"
    iconClass: icon-java
    openshift.io/display-name: "Quarkus JVM Build & Deploy Pipeline for DEV"
    template.openshift.io/bindable: "false"
    tags: "java,quarkus"
    version: "1.0"
  name: quarkus-jvm-pipeline-dev
objects:
  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        app: "${APP_NAME}"
      name: "${APP_NAME}"
    spec:
      lookupPolicy:
        local: false

  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: ${APP_NAME} Quarkus JVM Service.
      labels:
        app: ${APP_NAME}
      name: ${APP_NAME}
    spec:
      ports:
      - name: 8080-tcp
        port: 8080
        protocol: TCP
        targetPort: 8080
      selector:
        deploymentConfig: ${APP_NAME}

  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        description: ${APP_NAME} Quarkus JVM Deployment Configuration.
      labels:
        app: ${APP_NAME}
      name: ${APP_NAME}
    spec:
      replicas: 0
      selector:
        deploymentConfig: ${APP_NAME}
      strategy:
        activeDeadlineSeconds: 21600
        resources: {}
        rollingParams:
          intervalSeconds: 1
          maxSurge: 25%
          maxUnavailable: 25%
          timeoutSeconds: 600
          updatePeriodSeconds: 1
        type: Rolling
      template:
        metadata:
          labels:
            app: ${APP_NAME}
            deploymentConfig: ${APP_NAME}
          name: ${APP_NAME}
        spec:
          initContainers:
          - args:
              - '-c'
              - >-
                csplit -z -f crt- $ca_bundle '/-----BEGIN CERTIFICATE-----/' '{*}'
                && for file in crt-*; do keytool -import -noprompt -keystore
                $truststore_jks -file $file -storepass changeit -alias
                service-$file; done
            command:
              - /bin/bash
            env:
              - name: ca_bundle
                value: /var/run/secrets/kubernetes.io/serviceaccount/service-ca.crt
              - name: truststore_jks
                value: /var/run/secrets/java.io/keystores/truststore.jks
              - name: password
                value: changeit
            image: 'image-registry.openshift-image-registry.svc:5000/openshift/jdk-ubi-minimal:8.1'
            imagePullPolicy: IfNotPresent
            name: pem-to-truststore
            resources: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            volumeMounts:
              - mountPath: /var/run/secrets/java.io/keystores
                name: keystore-volume
          containers: 
          - env:
            - name: JAVA_OPTIONS
              value: '-Djavax.net.ssl.trustStore=/var/run/secrets/java.io/keystores/truststore.jks -Djavax.net.ssl.trustStorePassword=changeit'
            envFrom:
            - configMapRef:
                name: ${APP_NAME}-cm 
            - secretRef:
                name: ${APP_NAME}-sk
            image: image-registry.openshift-image-registry.svc:5000/rating/${APP_NAME}
            imagePullPolicy: Always
            name: ${APP_NAME}
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 8443
              name: https
              protocol: TCP
            volumeMounts:
            - mountPath: /var/run/secrets/java.io/keystores
              name: keystore-volume
            readinessProbe:
              failureThreshold: 3
              httpGet:
                path: /
                port: 8080
                scheme: HTTP
              periodSeconds: 20
              successThreshold: 1
              timeoutSeconds: 1
            livenessProbe:
              failureThreshold: 10
              httpGet:
                path: /
                port: 8080
                scheme: HTTP
              periodSeconds: 20
              successThreshold: 1
              timeoutSeconds: 1
          terminationGracePeriodSeconds: 75
          volumes:
          - emptyDir: {}
            name: keystore-volume

  - apiVersion: tekton.dev/v1alpha1
    kind: Pipeline
    metadata:
      name: ${APP_NAME}-build-deploy
    spec:
      params:
      resources:
        - name: appSource
          type: git
        - name: appImage
          type: image
      tasks:
        - name: build-app
          taskRef:
            name: ${APP_NAME}-build
          resources:
            inputs:
              - name: source
                resource: appSource
            outputs:
              - name: builtImage
                resource: appImage
        - name: config-app
          taskRef:
            name: ${APP_NAME}-config
          runAfter:
            - build-app
          resources:
            inputs:
              - name: source
                resource: appSource
        - name: deploy-app
          taskRef:
            name: ${APP_NAME}-deploy
          runAfter:
            - config-app

  - apiVersion: tekton.dev/v1alpha1
    kind: Task
    metadata:
      name: ${APP_NAME}-build
    spec:
      stepTemplate:
        securityContext:
          runAsUser: 0
          privileged: true
        volumeMounts:
          - name: varlibc
            mountPath: /var/lib/containers
          - name: maven-settings
            mountPath: /tmp/maven-settings
          - name: docker-file
            mountPath: /tmp/docker-file
      inputs:
        resources:
          - name: source
            type: git
        params:
          - name: destinationImage
            description: the fully qualified image name
            default: "$(outputs.resources.builtImage.url)"
          - name: dockerFile
            description: the docker file to used for building the application
            default: Dockerfile
          - name: tlsVerify
            description: tls verify
            type: string
            default: "false"
      outputs:
        resources:
          - name: builtImage
            type: image
      steps:
        - name: prep-build
          image: image-registry.openshift-image-registry.svc:5000/openshift/maven:3.6.3-jdk-8-slim
          script: |
            cp /tmp/maven-settings/settings.xml /workspace/source
            cp /tmp/docker-file/Dockerfile /workspace/source
          env:
            - name: user.home
              value: /home/tekton
          workingDir: "/"
        - name: build-sources
          image: image-registry.openshift-image-registry.svc:5000/openshift/maven:3.6.3-jdk-8-slim
          command:
            - mvn
          args:
            - "-DskipTests"
            - "-Dmaven.wagon.http.ssl.insecure=true"
            - "-ssettings.xml"
            - "-P ocp"
            - "-DappName=app"
            - "clean"
            - "package"
          env:
            - name: user.home
              value: /home/tekton
          workingDir: "/workspace/source"
        - name: build-image
          image: image-registry.openshift-image-registry.svc:5000/openshift/buildah:stable
          command:
            - "buildah"
          args:
            - "bud"
            - "--layers"
            - "--tls-verify=$(inputs.params.tlsVerify)"
            - "-f"
            - "Dockerfile"
            - "-t"
            - "$(inputs.params.destinationImage)"
            - "."
          workingDir: "/workspace/source"
        - name: push-image
          image: image-registry.openshift-image-registry.svc:5000/openshift/buildah:stable
          command:
            - "buildah"
          args:
            - "push"
            - "--tls-verify=$(inputs.params.tlsVerify)"
            - $(inputs.params.destinationImage)
            - "docker://$(inputs.params.destinationImage)"
          workingDir: "/workspace/source"
      volumes:
        - name: varlibc
          emptyDir: {}
        - name: maven-settings
          configMap:
            name: maven-settings-xml
        - name: docker-file
          configMap:
            name: docker-file

  - apiVersion: tekton.dev/v1alpha1
    kind: Task
    metadata:
      name: ${APP_NAME}-config
    spec:
      inputs:
        resources:
          - name: source
            type: git
      steps:
        - name: apply-config
          image: image-registry.openshift-image-registry.svc:5000/openshift/origin-cli:4.4.0
          workingDir: /workspace/source
          command: ["/bin/bash", "-c"]
          args:
            - |-
              echo Applying ocp configs
              oc apply -f ./ocp/dev
              echo -----------------------------------

  - apiVersion: tekton.dev/v1alpha1
    kind: Task
    metadata:
      name: ${APP_NAME}-deploy
    spec:
      steps:
        - name: rollout
          image: image-registry.openshift-image-registry.svc:5000/openshift/origin-cli:4.4.0
          workingDir: /workspace
          command: ["/bin/bash", "-c"]
          args:
            - |-
              echo Rolling out ${APP_NAME}
              oc rollout latest dc/${APP_NAME}
              echo -----------------------------------

  - apiVersion: tekton.dev/v1alpha1
    kind: PipelineResource
    metadata:
      name: ${APP_NAME}-source
    spec:
      type: git
      params:
        - name: url
          value: ${GIT_REPOSITORY}
        - name: revision
          value: ${GIT_BRANCH}

  - apiVersion: tekton.dev/v1alpha1
    kind: PipelineResource
    metadata:
      name: ${APP_NAME}-image
    spec:
      type: image
      params:
        - name: url
          value: "image-registry.openshift-image-registry.svc:5000/rating/${APP_NAME}:latest"

parameters:
  -
    description: "Name of the deployable application."
    displayName: "Application Name"
    name: APP_NAME
    required: true
  -
    description: "Git repository for source code."
    displayName: "Git Repo"
    name: GIT_REPOSITORY
    required: true
  -
    description: "Git repository branch to build app from"
    displayName: "Git Branch"
    name: GIT_BRANCH
    required: true
    value: master
  -
    description: "Name of the secret for Git credentials."
    displayName: "Build Secret"
    name: BUILD_SECRET
    required: true
    value: git-secret
    
